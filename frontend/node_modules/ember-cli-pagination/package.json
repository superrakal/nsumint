{
  "name": "ember-cli-pagination",
  "version": "0.6.6",
  "description": "Addon for Ember CLI to do simple pagination. Compatible with the kaminari API in Rails",
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "scripts": {
    "start": "ember server",
    "build": "ember build",
    "test": "ember test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mharris717/ember-cli-pagination"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "broccoli-asset-rev": "^2.0.0",
    "broccoli-ember-hbs-template-compiler": "^1.6.1",
    "connect-restreamer": "^1.0.1",
    "ember-cli": "0.1.7",
    "ember-cli-bootstrap": "0.0.3",
    "ember-cli-content-security-policy": "0.3.0",
    "ember-cli-dependency-checker": "0.0.7",
    "ember-cli-6to5": "0.2.1",
    "ember-cli-ic-ajax": "0.1.1",
    "ember-cli-inject-live-reload": "^1.3.0",
    "ember-cli-qunit": "0.1.2",
    "ember-data": "1.0.0-beta.12",
    "ember-export-application-global": "^1.0.0",
    "express": "^4.8.5",
    "glob": "^4.0.5",
    "morgan": "^1.5.0"
  },
  "keywords": [
    "ember-addon"
  ],
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "readme": "# Ember CLI Pagination\n\n[![Build Status](https://travis-ci.org/mharris717/ember-cli-pagination.svg?branch=master)](https://travis-ci.org/mharris717/ember-cli-pagination)\n\nSimple pagination addon for your Ember CLI app.\n\n![Todos](https://raw.githubusercontent.com/mharris717/ember-cli-pagination/master/screenshots/todos.png)\n\nFeatures: \n\n- Supports multiple types of pagination:\n  - Local\n  - Remote\n  - Infinite\n- Default pagination template - but you can write your own\n- Current page bound to the `page` query param\n- Compatible with the Kaminari API Rails gem\n\n\n**Questions?**\n\nThis is a new project, but many people are already using it successfully. If you have any trouble, open an issue, and you should get help quickly.\n\n## Requirements\n\n- ember-cli 0.0.46 or higher (untested with earlier versions, but it might work)\n- ember-cli-pagination 0.6.1 or higher (to match current docs)\n\n## Installation\n\n```\nnpm install ember-cli-pagination --save-dev\n```\n\n<!--- FULL DOC START -->\n\n## Usage\n\n#### Scenarios\n\n* [Local Store](#local-store)\n* [Remote Paginated API](#remote-paginated-api)\n* [Remote Unpaginated API](#remote-unpaginated-api)\n* [Paginating a Filtered List](#paginating-a-filtered-list)\n* [Infinite Pagination with All Records Present Locally](#infinite-pagination-with-all-records-present-locally)\n* [Infinite Pagination with a Remote Paginated API](#infinite-pagination-with-a-remote-paginated-api)\n\n#### Primitives\n\n* [`page-numbers` Component](#page-numbers-component)\n* [`pagedArray` Computed Helper](#pagedarray-computed-helper)\n* [PagedLocalArray](#pagedlocalarray)\n* [PagedRemoteArray](#pagedremotearray)\n\n#### Other\n\n* [Testing](#testing)\n* [Setup Paginated Rails API](#setup-paginated-rails-api)\n* [Contributors](#contributors)\n\n# Scenarios\n\n## Local Store\n\nThis scenario applies if:\n\n* Have all of your records already loaded client-side.\n* Wish to display one page of records at a time.\n* Want to have a page query parameter (optional).\n\n```javascript\nimport Ember from 'ember';\nimport pagedArray from 'ember-cli-pagination/computed/paged-array';\n\nEmber.ArrayController.extend({\n  // setup our query params\n  queryParams: [\"page\", \"perPage\"],\n\n  // set default values, can cause problems if left out\n  // if value matches default, it won't display in the URL\n  page: 1,\n  perPage: 10,\n\n  // can be called anything, I've called it pagedContent\n  // remember to iterate over pagedContent in your template\n  pagedContent: pagedArray('content', {pageBinding: \"page\", perPageBinding: \"perPage\"}),\n\n  // binding the property on the paged array \n  // to a property on the controller\n  totalPagesBinding: \"pagedContent.totalPages\"\n});\n```\n\n```handlebars\n{{#each pagedContent}}\n  {{! your app's display logic}}\n{{/each}}\n\n{{page-numbers content=pagedContent}}\n```\n\nIf you don't want to have query params, you may leave them out, along with the 3 bindings. The rest will still work. \n\n#### Notes\n\n* There is no need to touch the route in this scenario.\n* There used to be route and controller mixins, and they may return in the future. For now, they were too much overhead, and they were too much magic. If you think getting rid of the mixins is a mistake, please open an issue and let me know. \n\n--------------\n\n## Remote Paginated API\n\nThis scenario applies if:\n\n* Loading your records from a remote pagination-enabled API.\n* Wish to display one page of records at a time.\n* Want to have a page query parameter (optional).\n\n```javascript\nimport Ember from 'ember';\nimport RouteMixin from 'ember-cli-pagination/remote/route-mixin';\n\nexport default Ember.Route.extend(RouteMixin, {\n  // optional. default is 10\n  perPage: 25,\n\n  model: function(params) {\n    // todo is your model name\n    // returns a PagedRemoteArray\n    return this.findPaged('todo',params);\n  }\n});\n```\n\n```javascript\nimport Ember from 'ember';\n\nEmber.ArrayController.extend({\n  // setup our query params\n  queryParams: [\"page\", \"perPage\"],\n\n  // binding the property on the paged array \n  // to the query params on the controller\n  pageBinding: \"content.page\",\n  perPageBinding: \"content.perPage\",\n  totalPagesBinding: \"content.totalPages\",\n  \n  // set default values, can cause problems if left out\n  // if value matches default, it won't display in the URL\n  page: 1,\n  perPage: 10\n});\n```\n\n```handlebars\n{{#each this}}\n  {{! your app's display logic}}\n{{/each}}\n\n{{page-numbers content=content}}\n```\n\nIf you don't want to have query params, you may leave them out, along with the 3 bindings. The rest will still work. \n\n### Passing other params to findPaged\n\nIf your params object has other params, they will be passed to your backend.\n\n```javascript\nEmber.Route.extend({\n  model: function(params) {\n    // params is {page: 1, name: \"Adam\"}\n\n    return this.findPaged(\"post\",params);\n\n    // server will receive params page=1, name=Adam\n  }\n});\n```\n\n### Using other names for page/perPage/total_pages\n\nYou may pass an optional paramMapping arg. This is a hash that allows you to change the param names for page/perPage/total_pages.\n\nNote that the default param name for perPage is per_page.\n\n`page` and `perPage` control what is sent to the backend. `total_pages` controls where we expect to find the total pages value in the response from the backend. \n\n```javascript\nimport Ember from 'ember';\nimport RouteMixin from 'ember-cli-pagination/remote/route-mixin';\n\nexport default Ember.Route.extend(RouteMixin, {\n  model: function(params) {\n    params.paramMapping = {page: \"pageNum\",\n                           perPage: \"limit\",\n                           total_pages: \"num_pages\"};\n    return this.findPaged('todo',params);\n  }\n});\n```\n\n#### Notes\n\n* There used to be a controller mixin, and they may return in the future. For now, it was too much overhead, and it was too much magic. If you think getting rid of the mixin is a mistake, please open an issue and let me know. \n* Related: [Setup a Paginated Rails API](#setup-paginated-rails-api)\n\n--------------\n\n## Remote Unpaginated API\n\nThis scenario applies if:\n\n* Loading your records from a remote API that is not pagination-enabled.\n* You are ok with loading all records from the API in order to display one page at a time.\n* Wish to display one page of records at a time.\n* Want to have a page query parameter (optional).\n\nThis scenario is identical to the [Local Store](#local-store) scenario. \n\n--------------\n\n## Paginating a Filtered List\n\nThis scenario applies if:\n\n* Have all of your records already loaded client-side.\n* You are filtering those records down to create a subset for display\n* Wish to display one page of records at a time.\n* Want to have a page query parameter (optional).\n\n```javascript\nimport Ember from 'ember';\nimport pagedArray from 'ember-cli-pagination/computed/paged-array';\n\nEmber.ArrayController.extend({\n  // setup our query params\n  queryParams: [\"page\", \"perPage\"],\n\n  // set default values, can cause problems if left out\n  // if value matches default, it won't display in the URL\n  page: 1,\n  perPage: 10,\n\n  // only want records that are not completed\n  filteredContent: Ember.computed.filterBy('content', 'isCompleted', false),\n\n  // can be called anything, I've called it pagedContent\n  // remember to iterate over pagedContent in your template\n  pagedContent: pagedArray('filteredContent'),\n\n  // binding the property on the paged array \n  // to the query params on the controller\n  pageBinding: \"pagedContent.page\",\n  perPageBinding: \"pagedContent.perPage\",\n  totalPagesBinding: \"pagedContent.totalPages\"\n});\n```\n\n```handlebars\n{{#each pagedContent}}\n  {{! your app's display logic}}\n{{/each}}\n\n{{page-numbers content=pagedContent}}\n```\n\nIf you don't want to have query params, you may leave them out, along with the 3 bindings. The rest will still work. \n\n#### Notes\n\n* There is no need to touch the route in this scenario.\n\n--------------\n\n## Infinite Pagination with All Records Present Locally\n\nThe infinite pagination sections of the docs is not yet up to my preferred quality level. If you have any questions or problems, please do not hesitate to make an issue. \n\nThe example below does not use a page query param, although that is certainly possible. \n\nController:\n\n```javascript\nimport Ember from 'ember';\nimport pagedArray from 'ember-cli-pagination/computed/paged-array';\n\nexport default Ember.ArrayController.extend({\n  pagedContent: pagedArray('content', {infinite: \"unpaged\"}),\n\n  actions: {\n    loadNext: function() {\n      this.get('pagedContent').loadNextPage();\n    }\n  }\n});\n```\n\n`\"unpaged\"` in this example indicates the source array (the `content` property) is a regular (unpaged) array, as opposed to a PagedArray. \n\n--------------\n\n## Infinite Pagination with a Remote Paginated API\n\nThe example below does not use a page query param, although that is certainly possible. \n\n```javascript\n// controller\n\nimport Ember from 'ember';\nimport pagedArray from 'ember-cli-pagination/computed/paged-array';\n\nexport default Ember.ArrayController.extend({\n  pagedContent: pagedArray(\"content\", {infinite: true}),\n\n  actions: {\n    loadNext: function() {\n      this.get('pagedContent').loadNextPage();\n    }\n  }\n});\n```\n\n `{infinite: true}` in this example indicates the source array (the `content` property) is a paged array, in this case a PagedRemoteArray.\n\n```javascript\n// route\n\nimport Ember from 'ember';\nimport RouteMixin from 'ember-cli-pagination/remote/route-mixin';\n\nexport default Ember.Route.extend(RouteMixin, {\n  model: function(params) {\n    return this.findPaged('todo',params);\n  }\n});\n```\n\n\n# Primitives\n\n## `page-numbers` Component\n\nDisplays pagination controls.\n\n![Todos](https://raw.githubusercontent.com/mharris717/ember-cli-pagination/master/screenshots/todos.png) \n\nFeatures:\n\n* A clickable link for each page.\n* Previous and next buttons, disabled when appropriate.\n* The link to the current page receives the .active class.\n* Styling with bootstrap, if included.\n\n### Including in your template\n\nThere are two ways to use this component. \n\n#### Backed by a PagedArray\n\nThis is the easier and most common way.\n\n```javascript\nEmber.ArrayController.extend({\n  pagedContent: pagedArray('content')\n});\n```\n\n```handlebars\n{{#each pagedContent}}\n  {{! your app's display logic}}\n{{/each}}\n\n{{page-numbers content=pagedContent}}\n```\n\nClicking a page number will:\n\n* Display the rows on the clicked page.\n* Update `pagedContent.page` to the clicked page.\n\nSee the pagedArray doc for more information on the pagedArray helper.\n\n#### Bind `currentPage` and `totalPages` to your properties directly\n\n```javascript\nEmber.Object.extend({\n  page: 1,\n  totalPages: 10\n});\n```\n\n```handlebars\n{{page-numbers currentPage=page totalPages=totalPages}}\n``` \n\nClicking a page number will:\n\n* Update the `page` property to the clicked page.\n\n### Customization\n\nYou can use your own template for the pagination controls. Create it in your app at app/templates/components/page-numbers.hbs and it will be used automatically.\n\nSee [the default template](https://github.com/mharris717/ember-cli-pagination/blob/master/app/templates/components/page-numbers.hbs) for an example.\n\nTo always show the first and last pages (in addition to the pages that would be shown normally), set the showFL property\n\n```javascript\n{{page-numbers content=content showFL=true}}\n```\n\n### Future Additions\n\n* <</>> links to move more than one page at a time.\n* Configuration settings to change behavior, remove arrows, etc.\n\n--------------\n\n## `pagedArray` Computed Helper\n\nCreates a computed property representing a PagedArray. \n\nA PagedArray acts just like a normal array containing only the records on the current page.\n\nTakes two arguments:\n\n* A `contentProperty` argument, representing the name of the \"all objects\" property on the source object.\n* An optional `options` hash. Currently the only allowed options are page and perPage, both integers\n\nA PagedArray has several properties you may find useful:\n\n* `page`: the current page (Default: 1)\n* `perPage`: how many records to have on each page (Default: 10)\n* `totalPages`: the total number of pages\n\n```javascript\nimport pagedArray from 'ember-cli-pagination/computed/paged-array';\n\nEmber.Object.extend({\n  // The property that contains all objects\n  // In a real app, often set by the route\n  content: [1,2,3,4,5,6,7,8,9,10],\n\n  // the PagedArray\n  pagedContent: pagedArray('content', {perPage: 5})\n});\n```\n\nIn this example, these properties will be available:\n\n* `pagedContent.page`\n* `pagedContent.perPage`\n* `pagedContent.totalPages`\n\nThe pagedContent property can serve as a backing array for pagination controls. See the page-numbers component for details. \n\n--------------\n\n## PagedLocalArray\n\nPagedLocalArray represents a page of records from the list of all records.  \n\nAll records must be loaded client-side in order to use PagedArray.\n\nIt takes three arguments at creation, in a standard options hash passed to PagedArray#create:\n\n* content - list of all records\n* page - Optional (Default 1)\n* perPage - Optional (Default 10)\n\nOnce the data is loaded, you may iterate over a PagedArray as you would a normal array.\n\nThe object acts as a promise, with a working `then` method.\n\n```javascript\nimport PagedArray from 'ember-cli-pagination/local/paged-array';\n\nvar all = Ember.A([1,2,3,4,5]);\nvar paged = PagedArray.create(content: all, perPage: 2);\n\nequal(paged.get('length'),2);\ndeepEqual(paged.toArray(),[1,2]);\n\npaged.set(\"page\",3);\ndeepEqual(paged.toArray(),[5]);\n\nall.pushObject(6);\ndeepEqual(paged.toArray(),[5,6]);\n```\n\n### Updating\n\nA Paged will be updated when the page property is changed.\n\n### Binding\n\nYou may bind PagedArray#page like any property. \n\nTo update records when a page property changes:\n\n```javascript\nEmber.ArrayController.extend({\n  // the content property represents a paged array\n\n  pageBinding: \"content.page\"\n});\n```\n\n--------------\n\n## PagedRemoteArray\n\nPagedRemoteArray represents a page of records fetched from a remote pagination-enabled API.\n\nIt takes six arguments at creation, in a standard options hash passed to PagedRemoteArray#create:\n\n* modelName - singular\n* store\n* page\n* perPage\n* otherParams - optional. If provided, will be passed on to server at same level as page and perPage\n* paramMapping - optional. Allows configuration of param names for page/perPage/total_pages\n\nOnce the data is loaded, you may iterate over a PagedRemoteArray as you would a normal array.\n\nThe object acts as a promise, with a working `then` method. If you are manually iterating over records outside of the standard workflow, make sure to use `then` with standard promise semantics, just as you would an object returned from a normal `store.find` call. \n\n```javascript\nimport PagedRemoteArray from 'ember-cli-pagination/remote/paged-remote-array';\n\nEmber.Route.extend({\n  model: function(params) {\n    // possible params are params.page and params.per_page\n    // Ember's query param logic converts perPage to per_page at some point, for now just dealing with it.\n\n    return PagedRemoteArray.create({modelName: 'post', \n                                    store: this.store,\n                                    page: params.page || 1,\n                                    perPage: params.per_page || 10});\n  }\n});\n```\n\n### Updating\n\nA PagedRecordArray will make a new remote call to update records when the page property is changed. Again, standard promise usage applies here. \n\n```javascript\n// pagedArray represents a PagedRemoteArray, already created and loaded with data, with page=1\n// var pagedArray = ....\n\n// this will trigger the remote call for new data\npagedArray.set(\"page\",2);\n\npagedArray.then(function() {\n  // the data is loaded.\n  pagedArray.forEach(function(obj) {\n    // your logic\n  });\n});\n```\n\n### Binding\n\nYou may bind PagedRemoteArray#page like any property. \n\nTo update records when a page property changes:\n\n```javascript\nEmber.ArrayController.extend({\n  // the content property represents a paged array\n\n  pageBinding: \"content.page\"\n});\n```\n\n### `otherParams`\n\nPagedRemoteArray takes an optional otherParams arg. These params will be passed to the server when the request is made.\n\n```javascript\nvar paged = PagedRemoteArray.create({store: store, modelName: 'number', page: 1, perPage: 2, otherParams: {name: \"Adam\"}});\n\n// server will receive params page=1, perPage=2, name=Adam\n\n### `paramMapping`\n\nPagedRemoteArray takes an optional paramMapping arg. This is a hash that allows you to change the param names for page/perPage/total_pages.\n\nNote that the default param name for perPage is per_page.\n\n`page` and `perPage` control what is sent to the backend. `total_pages` controls where we expect to find the total pages value in the response from the backend. \n\n```javascript\n// This will send a request with pageNum and limit params, \n// and expect a response with a num_pages param in the meta. \nvar paged = PagedRemoteArray.create({/* ..., */\n                                    paramMapping: {page: \"pageNum\",\n                                                   perPage: \"limit\",\n                                                   total_pages: \"num_pages\"}});\n```\n\n# Other\n\n## Testing\n\nWe include some helpers to make testing pagination easier. \n\nThe helper used here is responseHash, in the context of a Pretender definition.\n\nIt takes the request, all fixtures, and the model name, and returns the appropriate response (with meta tag).\n\n```coffeescript\n`import Todo from '../../models/todo'`\n`import Helpers from 'ember-cli-pagination/test-helpers'`\n\nc = ->\n  server = new Pretender ->\n    @get \"/todos\", (request) ->\n      res = Helpers.responseHash(request,Todo.FIXTURES,'todo')\n      \n      [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(res)]\n\n`export default c`\n```\n\n--------------\n\n## Setup Paginated Rails API\n\n```ruby\n# Gemfile\ngem 'kaminari'\n```\n\n```ruby\n# controller\n# I'm fairly sure you shouldn't need to set the meta manually, but for now that's what I'm doing.\n\nclass TodosController < ApplicationController\n  def index\n    page = (params[:page] || 1).to_i\n    todos = Todo.page(page).per(10)\n    render json: todos, meta: {total_pages: todos.total_pages}\n  end\nend\n```\n\n--------------\n\n## Contributors\n\nYou guys rock!\n\n* @broerse\n* @robdel12\n* @samselikoff\n* @pedrokiefer\n* @gcollazo\n* @johanneswuerback\n* @tonycoco\n* @dlameri\n* @piotrpalek\n* @robertleib\n\n<!--- FULL DOC END -->\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mharris717/ember-cli-pagination/issues"
  },
  "_id": "ember-cli-pagination@0.6.6",
  "dist": {
    "shasum": "e7d89e88599b25225e69c670f76ce875735c3701"
  },
  "_from": "ember-cli-pagination@^0.6.6",
  "_resolved": "https://registry.npmjs.org/ember-cli-pagination/-/ember-cli-pagination-0.6.6.tgz"
}
