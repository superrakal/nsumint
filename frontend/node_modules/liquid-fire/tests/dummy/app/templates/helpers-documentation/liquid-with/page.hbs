<h2>\{{#liquid-with}}</h2>

<p>Acts just like a normal Ember <code>\{{with}}</code>, except:</p>

<ul>
  <li>it respects the transition map and lets you animate between contexts.</li>
  <li>it wraps its content in a non-virtual view, meaning that it adds
    markup. See the {{#link-to "helpers-documentation.index"}}Common
    Behavior and Options{{/link-to}} that apply to all liquid-fire
    helpers.</li>
</ul>

<p>This helper will grab whatever context you pass it, and when that
context changes, the helper will hold on to a copy of the old value
long enough to gracefully transition away.</p>

<p>Binding to a singleton controller's <code>model</code> works great,
because future changes to the model will be captured and
animated. Binding directly to a singleton controller won't animate
because the controller never changes. If you need a controller inside
the <code>\{{#liquid-with}}</code>, it's best to instantiate one
explicitly with the <code>controller</code> option, so that a fresh
controller will be instantiated for each update to your bound
context.</p>

<h3>When to use it</h3>

<p>Use this when you want to animate the transitions between
different models on the same route.</p>

<div class="callout callout-danger"><code>\{{#liquid-with foo}}</code>
is supported, but as of Ember 1.9 it is deprecated just like the
normal <code>\{{#with foo}}</code>. Use <code>\{{#liquid-with foo as bar}}</code> instead.</div>

<h3>Demo</h3>

<p>Notice that the ID being rendered maps correctly to the URL in both
directions.</p>

{{!- BEGIN-SNIPPET with-demo -}}

{{#liquid-with model as currentModel use="rotateBelow" class="demo-container"}}
  {{currentModel.id}}
  <button {{action "higher" currentModel}}>Go</button>
{{/liquid-with}}

{{!- END-SNIPPET -}}

<h4>Template</h4>

{{code-snippet name="with-demo.hbs"}}

<h4>Transition Implementation</h4>

<p>This appears in <code>app/transitions/rotate-below.js</code>:</p>

{{code-snippet name="rotate-below.js"}}
