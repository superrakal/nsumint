<h2>modal()</h2>

<p>The <code>modal</code> function binds one or more of the
properties on your controller to a modal dialog component.</p>

<p>The rule for displaying a modal is simple: if the controller is
active and any of the properties have non-default values, the modal
appears. Each of the properties is also passed through to your modal
component itself. If any of these properties change, the modal
re-animates.</p>

<p><code>modal(componentName, options)</code> takes these options:</p>

<dl>
  <dt>withParams</dt>
  <dd>
    <p>
      The property names that will be passed to the component.
      We will show the component whenever any of these has a non-default value.
      This can be a string, an array of strings, an object or an array of strings and objects.
    </p>
    <p>
      If given an object, the key is the property name on the controller and the value
      will be the name this is accessed as in the modal component.
      For example, the following will map <code>foo</code> in the controller to <code>foo</code> in the modal,
      and <code>bar</code> in the controller to <code>baz</code> in the modal.
    </p>
    <pre class="javascript hljs">
withParams: ["foo", {
  bar: "baz"
}]</pre>
  </dd>

  <dt>otherParams</dt>
  <dd>Lets you bind properties through from the controller to the modal.
    These do not affect the displaying of the modal.
    Accepts property names in the same format as `withParams`.
  </dd>

  <dt>controller</dt>
  <dd>Optionally override the controller name that we will bind to. By
    default we use the default controller name for the scope in which
    you call <code>modal()</code>.
  </dd>

  <dt>dismissWithOutsideClick</dt>
  <dd>If true, clicking outside the modal will dismiss it. If false,
    your component will receive an <code>outsideClick</code> event
    instead. Defaults to true.
  </dd>

  <dt>dismissWithEscape</dt>
  <dd>If true, the escape key will dismiss the modal. If false, your
    component will receive an <code>escape</code> event
    instead. Defaults to true.
  </dd>

  <dt>ariaLabelledBy</dt>
  <dd>Lets you set the aria-labelledby property on the modal dialog
    box for proper accessibility.</dd>

  <dt>ariaLabel</dt>
  <dd>Lets you set the aria-label property on the modal dialog box for
    proper accessibility.</dd>

  <dt>actions</dt>
  <dd>
    Wire up actions from the modal component's <code>sendAction</code> to your app. For example,
    <code>actions: {submit: "modalSubmitted"}</code> will trigger the <code>modalSubmitted</code>
    event on your controller when a <code>submit</code> event is fired in your modal.
  </dd>

  <dt>dialogClass</dt>
  <dd>
    An optional additional CSS class to put on
    the <code>lf-dialog</code> element. This lets you style the
    containing box differently for different modals.
  </dd>
</dl>

<div class="callout callout-info">We still need an API for customizing
which animated transitions to use for showing/hiding your various dialog
boxes. For now, you can override the default transition by defining a
{{#link-to "transitions.defining"}}custom transition{{/link-to}}
called `modal-popup`.</div>
