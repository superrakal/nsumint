{
  "name": "ember-cli-release",
  "version": "0.2.3",
  "description": "Ember CLI addon for managing release versions.",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "node tests/runner.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lytics/ember-cli-release.git"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "author": {
    "name": "Steven Lindberg",
    "email": "steven@lytics.io"
  },
  "license": "MIT",
  "dependencies": {
    "chalk": "^1.0.0",
    "git-tools": "^0.1.4",
    "merge": "^1.2.0",
    "moment-timezone": "^0.3.0",
    "rsvp": "^3.0.17",
    "semver": "^4.3.1"
  },
  "devDependencies": {
    "chai": "^2.1.1",
    "ember-cli": "0.2.0",
    "ember-cli-dependency-checker": "0.0.8",
    "fs-extra": "^0.18.0",
    "glob": "^5.0.1",
    "mocha": "^2.2.1",
    "rimraf": "^2.3.2"
  },
  "keywords": [
    "ember-addon",
    "ember-cli",
    "release",
    "git",
    "tag"
  ],
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "readme": "# ember-cli-release\n\n[![Build Status](https://travis-ci.org/lytics/ember-cli-release.svg?branch=master)](https://travis-ci.org/lytics/ember-cli-release)\n[![npm version](https://badge.fury.io/js/ember-cli-release.svg)](http://badge.fury.io/js/ember-cli-release)\n\nEmber CLI addon that defines a `release` command for bumping the version of your app or addon.\n\n## Installation\n\n```sh\n$ ember install ember-cli-release\n```\n\nThis will also generate the config file `config/release.js` which can be used to provide default options ([see below](#options)).\n\n## Usage\n\nThis addon revolves around git tags, and so relies heavily on shelling out to run git commands (unlike the wonderful [`git-repo-info`](https://github.com/rwjblue/git-repo-info)).\n\nWhen invoked with no options:\n\n```sh\n$ ember release\n```\n\nIt will:\n\n  1. Assume that the project uses the [SemVer](http://semver.org/) versioning scheme\n  2. Find the latest tag that is SemVer compliant and increment its PATCH version\n  3. Replace the `version` property of `package.json` and `bower.json` with the new version\n  4. Commit all changes to the working tree\n  5. Create a lightweight git tag with the new version\n  6. Push the branch and the new tag to `origin`\n\nSee the [examples section](#examples) for more ways to use the command.\n\n## Options\n\nOptions can be specified on the command line or in `config/release.js` unless marked with an asterisk (`*`). Options specified on the command line **always take presedence** over options in the config file. Run `ember help` to see CLI aliases.\n\n- `local`\n\n  Default: `false`\n\n  Whether to only create the git tag locally or not.\n\n- `remote`\n\n  Default: `'origin'`\n\n  The git remote to push new tags to, ignored if `local` is true.\n\n- `tag`\\*\n\n  Default: `null`\n\n  Optional name of the tag to create, overrides versioning strategies.\n\n- `annotation`\n\n  Default: `null`\n\n  Message to add when creating a tag, [indicates that the tag should be annotated](http://git-scm.com/book/tr/v2/Git-Basics-Tagging#Annotated-Tags), where `%@` is replaced with tag name.\n\n- `message`\n\n  Default: `'Released %@'`\n\n  Message to use when committing changes to the working tree (including changes to `package.json` and `bower.json`), where `%@` is replaced with tag name.\n\n- `yes`\\*\n\n  Default: `false`\n\n  Whether to skip confirmation prompts or not (answer 'yes' to all questions).\n\n- `strategy`\n\n  Default: `'semver'`\n\n  The versioning strategy to use, either `semver` or `date`.\n\n- `major`\\*\n\n  Default: `false`\n\n  Increment the MAJOR SemVer version, takes precedence over `minor`. Only used when the `strategy` option is `'semver'`.\n\n- `minor`\\*\n\n  Default: `false`\n\n  Increment the MINOR SemVer version, if both `major` and `minor` are false, PATCH is incremented. Only used when the `strategy` option is `'semver'`.\n\n- `format`\n\n  Default: `'YYYY.MM.DD'`\n\n  The format string used when creating a tag based on the current date using [`moment().format()`](http://momentjs.com/docs/#/displaying/format/). Only used when the `strategy` option is `'date'`.\n\n- `timezone`\n\n  Default: `'UTC'`\n\n  The timezone to consider the current date in. Only used when the `strategy` option is `'date'`.\n\n## Workflow\n\nThese are the steps that take place when running the `release` command (unchecked steps have not yet been implemented):\n\n1. ☑ Abort if HEAD is already at a tag\n2. ☑ If working tree is dirty, prompt user that their changes will be included in release commit\n3. ☑ Calculate new version\n  1. Use `tag` option if present\n  2. Generate new version using `strategy` option (default: 'semver')\n    - SemVer\n      1. Look for latest tag using `node-semver` ordering\n      2. Increment based on `major`, `minor`, or `patch` (default: `patch`)\n    - Date\n      1. Create tag name based on current date and `format` option (default: `YYYY.MM.DD`)\n      2. Look for existing tag of same name, append `.X` where X is an incrementing integer\n  3. Print new version name\n4. ☑ Replace `version` property of `package.json`/`bower.json` files with new version\n5. ◻ Search/replace whitelisted files with new version\n6. ◻ Invoke build config function if available or run `ember build` if `build` option is `true`\n7. ◻ Invoke changelog config function if available\n8. ☑ Commit changes\n  1. Skip if working tree is unmodified\n  2. Stage all changes and commit with `message` option as the commit message\n9. ☑ Create tag\n  1. Prompt to continue with new tag name\n  2. Tag the latest commit with new version using the `annotation` option if specified\n10. ☑ Push to remote\n  1. Skip if `local` option is `true`\n  2. Push current branch and tags to remote specified by `remote` option\n11. ◻ NPM Publish\n  1. Skip if `publish` option is `false`\n  2. Publish package to NPM using current credentials\n\n## Examples\n\nTo create a new tag based on the date in east cost time with a custom format:\n\n```sh\n$ ember release --strategy=date --format=\"YYYY-MM-DD\" --timezone=\"America/New_York\"\n```\n\nOr to create a specific tag (no versioning strategy) with annotation, locally only:\n\n```sh\n$ ember release --local --tag=\"what_am_i_doing\" --annotation=\"First version wooooo!\"\n```\n\n## Contributing\n\nPull requests welcome, but they must be fully tested (and pass all existing tests) to be considered. Discussion issues also welcome.\n\n## Running Tests\n\n```sh\n$ npm test\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lytics/ember-cli-release/issues"
  },
  "homepage": "https://github.com/lytics/ember-cli-release#readme",
  "_id": "ember-cli-release@0.2.3",
  "_from": "ember-cli-release@0.2.3"
}
