{
  "name": "broccoli-funnel",
  "version": "0.2.3",
  "description": "Broccoli plugin that allows you to filter files selected from an input tree down based on regular expressions.",
  "main": "index.js",
  "author": {
    "name": "Robert Jackson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/broccolijs/broccoli-funnel.git"
  },
  "scripts": {
    "test": "mocha tests/"
  },
  "keywords": [
    "broccoli-plugin",
    "javascript"
  ],
  "dependencies": {
    "broccoli-read-compat": "^0.1.2",
    "core-object": "0.0.2",
    "minimatch": "^2.0.1",
    "mkdirp": "^0.5.0",
    "symlink-or-copy": "^1.0.0",
    "walk-sync": "^0.1.3"
  },
  "devDependencies": {
    "broccoli": "^0.15.0",
    "rimraf": "^2.3.2",
    "rsvp": "^3.0.14",
    "expect.js": "^0.3.1",
    "mocha": "~1.18.2",
    "mocha-jshint": "0.0.9"
  },
  "readme": "# Broccoli Funnel\n\n[![Build Status](https://travis-ci.org/broccolijs/broccoli-funnel.svg?branch=master)](https://travis-ci.org/broccolijs/broccoli-funnel)\n\nBroccoli Funnel is a plugin that filters a tree and returns a new tree that\nrepresents a subset of the files in the original tree. The filters are\nexpressed as regular expressions.\n\nInspired by [broccoli-static-compiler](https://github.com/joliss/broccoli-static-compiler).\n\n## Documentation\n\n### `funnel(inputTree, options)`\n\n`inputTree` *{Single tree}*\n\nA Broccoli tree. A tree in Broccoli can be either a string that references a\ndirectory in your project or a tree structure returned from running another\nBroccoli plugin.\n\nIf your project has the following file structure:\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select a subsection of the tree via Funnel:\n\n```javascript\nvar funnel = require('broccoli-funnel');\nvar cssFiles = funnel('src/css');\n\n/*\n  cssFiles is now equivalent to this tree:\n\n  ├── reset.css\n  └── todos.css\n*/\n\n// export a tree for Broccoli to begin processing\nmodule.exports = cssFiles;\n```\n\n#### Options\n\n`srcDir` *{String}*\n\nA string representing the portion of the input tree to start the funneling\nfrom. This will be the base path for any `include`/`exclude` regexps.\n\nDefault: `'.'`, the root path of input tree.\n\nIf your project has the following file structure:\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select a subsection of the tree via Funnel:\n\n```javascript\nvar funnel = require('broccoli-funnel');\nvar mergeTrees = require('broccoli-merge-trees');\n\n// root of our source files\nvar projectFiles = 'src';\n\n/* get a new tree of only files in the 'src/css' directory\n  cssFiles is equivalent to the tree:\n\n  ├── reset.css\n  └── todos.css\n*/\nvar cssFiles = funnel(projectFiles, {\n  srcDir: 'css'\n});\n\n/* get a new tree of only files in the 'src/icons' directory\n  imageFiles is equivalent to the tree:\n\n  ├── check-mark.png\n  └── logo.jpg\n*/\nvar imageFiles = funnel(projectFiles, {\n  srcDir: 'icons'\n});\n\n\nmodule.exports = mergeTrees([cssFiles, imageFiles]);\n```\n\n----\n\n`destDir` *{String}*\n\nA string representing the destination path that filtered files will be copied to.\n\nDefault: `'.'`, the root path of input tree.\n\nIf your project has the following file structure:\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select a subsection of the tree via Funnel and copy it to a new location:\n\n```javascript\nvar funnel = require('broccoli-funnel');\n\nvar cssFiles = funnel('src/css', {\n  destDir: 'build'\n});\n\n/*\n  cssFiles is equivalent to the tree:\n\n  build/\n  ├── reset.css\n  └── todos.css\n*/\n\nmodule.exports = cssFiles;\n```\n\n----\n\n`allowEmpty` *{Boolean}*\n\nWhen using `srcDir`/`destDir` options only (aka no filtering via `include`/`exclude` options), if the `srcDir` were missing an error would be thrown.\nSetting `allowEmpty` to true, will prevent that error by creating an empty directory at the destination path.\n\n----\n\n`include` *{Array of RegExps|Glob Strings|Functions}*\n\nOne or more matcher expression (regular expression, glob string, or function). Files within the tree whose names match this\nexpression will be copied (with the location inside their parent directories\npreserved) to the `destDir`.\n\nDefault: `[]`.\n\nIf your project has the following file structure\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select files that match a regular expression copy those subtrees to a\nnew location, preserving their location within parent directories:\n\n```javascript\nvar funnel = require('broccoli-funnel');\n\n// finds all files that match /todo/ and moves them\n// the destDir\nvar todoRelatedFiles = funnel('src', {\n  include: [new RegExp(/todo/)]\n});\n\n/*\n  todoRelatedFiles is equivalent to the tree:\n  .\n  ├── css\n  │   └── todos.css\n  └── javascript\n      └── todo.js\n*/\n\nmodule.exports = todoRelatedFiles;\n```\n\n----\n\n`exclude` *{Array of RegExps|Glob Strings|Functions}*\n\nOne or more matcher expression (regular expression, glob string, or function). Files within the tree whose names match this\nexpression will _not_ be copied to the `destDir` if they otherwise would have\nbeen.\n\n*Note, in the case when a file matches both an include and exclude pattern,\nthe exclude pattern wins*\n\nDefault: `[]`.\n\nIf your project has the following file structure:\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select files that match a regular expression exclude them from copying:\n\n```javascript\nvar funnel = require('broccoli-funnel');\n\n// finds all files in 'src' EXCEPT those that match /todo/\n// and adds them to a tree.\nvar nobodyLikesTodosAnyway = funnel('src', {\n  exclude: [new RegExp(/todo/)]\n});\n\n/*\n  nobodyLikesTodosAnyway is equivalent to the tree:\n  .\n  ├── css\n  │   └── reset.css\n  ├── icons\n  │   ├── check-mark.png\n  │   └── logo.jpg\n  └── javascript\n      └── app.js\n*/\n\nmodule.exports = nobodyLikesTodosAnyway;\n```\n\n----\n\n`files` *{Array of Strings}*\n\nOne or more relative file paths. Files within the tree whose relative paths match\nwill be copied (with the location inside their parent directories\npreserved) to the `destDir`.\n\nDefault: `[]`.\n\nIf your project has the following file structure\n\n```shell\n.\n├── Brocfile.js\n└── src/\n    ├── css/\n    │   ├── reset.css\n    │   └── todos.css\n    ├── icons/\n    │   ├── check-mark.png\n    │   └── logo.jpg\n    └── javascript/\n        ├── app.js\n        └── todo.js\n```\n\nYou can select a specific list of files copy those subtrees to a\nnew location, preserving their location within parent directories:\n\n```javascript\nvar funnel = require('broccoli-funnel');\n\n// finds these specific files and moves them to the destDir\nvar someFiles = funnel('src', {\n  files: ['css/reset.css', 'icons/check-mark.png']\n});\n\n/*\n  someFiles is equivalent to the tree:\n  .\n  ├── css\n  │   └── reset.css\n  └── icons\n      └── check-mark.png\n*/\n\nmodule.exports = someFiles;\n```\n\n----\n\n`getDestinationPath` *{Function}*\n\nThis method will get called for each file, receiving the currently processing\n`relativePath` as its first argument. The value returned from\n`getDestinationPath` will be used as the destination for the new tree. This is\na very simple way to move files from one path to another (replacing the need\nfor `broccoli-file-mover` for example).\n\nThe return value of this method is cached for each input file. This means that\n`getDestinationPath` will only be called once per `relativePath`.\n\nIn the following example, `getDestinationPath` is used to move `main.js` to\n`ember-metal.js`:\n\n```javascript\nvar tree = funnel('packages/ember-metal/lib', {\n  destDir: 'ember-metal',\n\n  getDestinationPath: function(relativePath) {\n    if (relativePath === 'lib/main.js') {\n      return 'ember-metal.js';\n    }\n\n    return relativePath;\n  }\n});\n```\n\n## ZOMG!!! TESTS?!?!!?\n\nI know, right?\n\nRunning the tests:\n\n```javascript\nnpm install\nnpm test\n```\n\n## License\n\nThis project is distributed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/broccolijs/broccoli-funnel/issues"
  },
  "homepage": "https://github.com/broccolijs/broccoli-funnel#readme",
  "_id": "broccoli-funnel@0.2.3",
  "_from": "broccoli-funnel@0.2.3"
}
