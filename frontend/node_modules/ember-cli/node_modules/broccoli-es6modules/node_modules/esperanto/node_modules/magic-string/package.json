{
  "name": "magic-string",
  "description": "Modify strings, generate sourcemaps",
  "author": {
    "name": "Rich Harris"
  },
  "version": "0.4.9",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rich-harris/magic-string.git"
  },
  "main": "dist/magic-string.js",
  "jsnext:main": "src/MagicString/index.js",
  "license": "MIT",
  "dependencies": {
    "vlq": "^0.2.0"
  },
  "devDependencies": {
    "es6-promise": "^2.0.1",
    "gobble": "^0.7.10",
    "gobble-esperanto-bundle": "^0.1.7",
    "mocha": "^2.1.0",
    "resolve": "^1.1.0",
    "source-map": "^0.1.40"
  },
  "keywords": [
    "string",
    "string manipulation",
    "sourcemap",
    "templating",
    "transpilation"
  ],
  "scripts": {
    "test": "mocha",
    "build": "sh ./scripts/build.sh",
    "prepublish": "npm run build"
  },
  "files": [
    "src/*",
    "dist/*",
    "README.md"
  ],
  "readme": "# magic-string\n\nSuppose you have some source code. You want to make some light modifications to it - replacing a few characters here and there, wrapping it with a header and footer, etc - and ideally you'd like to generate a source map at the end of it. You've thought about using something like [recast](https://github.com/benjamn/recast) (which allows you to generate an AST from some JavaScript, manipulate it, and reprint it with a sourcemap without losing your comments and formatting), but it seems like overkill for your needs (or maybe the source code isn't JavaScript).\n\nYour requirements are, frankly, rather niche. But they're requirements that I also have, and for which I made magic-string. It's a small, fast utility for manipulating strings and generating sourcemaps.\n\n## Installation\n\nmagic-string works in both node.js and browser environments. For node, install with npm:\n\n```bash\nnpm i magic-string\n```\n\nTo use in browser, grab the [magic-string.deps.js](https://raw.githubusercontent.com/Rich-Harris/magic-string/master/dist/magic-string.deps.js) file and add it to your page:\n\n```html\n<script src='magic-string.deps.js'></script>\n```\n\n(It also works with various module systems, if you prefer that sort of thing - it has a dependency on [vlq](https://github.com/Rich-Harris/vlq).)\n\n## Usage\n\nThese examples assume you're in node.js, or something similar:\n\n```js\nvar MagicString = require( 'magic-string' );\nvar string = new MagicString( 'problems = 99' );\n\ns.replace( 0, 8, 'answer' );\ns.toString(); // 'answer = 99'\ns.locate( 9 ); // 7 - the character originally at index 9 ('=') is now at index 7\ns.locateOrigin( 7 ); // 9\n\ns.replace( 11, 13, '42' ); // character indices always refer to the original string\ns.toString(); // 'answer = 42'\n\ns.prepend( 'var ' ).append( ';' ); // most methods are chainable\ns.toString(); // 'var answer = 42;'\n\nvar map = s.generateMap({\n  source: 'source.js',\n  file: 'converted.js.map',\n  includeContent: true\n}); // generates a v3 sourcemap\n\nrequire( 'fs' ).writeFile( 'converted.js', s.toString() );\nrequire( 'fs' ).writeFile( 'converted.js.map', map.toString() );\n```\n\n## Methods\n\n### s.addSourcemapLocation( index )\n\nAdds the specified character index (with respect to the original string) to sourcemap mappings, if `hires` is `false` (see below).\n\n### s.append( content )\n\nAppends the specified content to the end of the string. Returns `this`.\n\n### s.clone()\n\nDoes what you'd expect.\n\n### s.generateMap( options )\n\nGenerates a [version 3 sourcemap](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit). All options are, well, optional:\n\n* `file` - the filename where you plan to write the sourcemap\n* `source` - the filename of the file containing the original source\n* `includeContent` - whether to include the original content in the map's `sourcesContent` array\n* `hires` - whether the mapping should be high-resolution. Hi-res mappings map every single character, meaning (for example) your devtools will always be able to pinpoint the exact location of function calls and so on. With lo-res mappings, devtools may only be able to identify the correct line - but they're quicker to generate and less bulky. If sourcemap locations have been specified with `s.addSourceMapLocation()`, they will be used here.\n\nThe `names` property of the sourcemap is not currently populated.\n\nThe returned sourcemap has two (non-enumerable) methods attached for convenience:\n\n* `toString` - returns the equivalent of `JSON.stringify(map)`\n* `toUrl` - returns a DataURI containing the sourcemap. Useful for doing this sort of thing:\n\n```js\ncode += '\\n//# sourceMappingURL=' + map.toUrl();\n```\n\n### s.indent( prefix[, options] )\n\nPrefixes each line of the string with `prefix`. If `prefix` is not supplied, the indentation will be guessed from the original content, falling back to a single tab character. Returns `this`.\n\nThe `options` argument can have an `exclude` property, which is an array of `[start, end]` character ranges. These ranges will be excluded from the indentation - useful for (e.g.) multiline strings.\n\n### s.insert( index, content )\n\nInserts the specified `content` at the `index` in the original string. Returns `this`.\n\n### s.locate( index )\n\nFinds the location, in the generated string, of the character at `index` in the original string. Returns `null` if the character in question has been removed or replaced.\n\n### s.locateOrigin( index )\n\nThe opposite of `s.locate()`. Returns `null` if the character in question was inserted with `s.append()`, `s.prepend()` or `s.replace()`.\n\n### s.prepend( content )\n\nPrepends the string with the specified content. Returns `this`.\n\n### s.remove( start, end )\n\nRemoves the characters from `start` to `end` (of the original string, **not** the generated string). Removing the same content twice, or making removals that partially overlap, will cause an error. Returns `this`.\n\n### s.replace( start, end, content )\n\nReplaces the characters from `start` to `end` with `content`. The same restrictions as `s.remove()` apply. Returns `this`.\n\n### s.slice( start, end )\n\nReturns the content of the generated string that corresponds to the slice between `start` and `end` of the original string. Throws error if the indices are for characters that were already removed.\n\n### s.toString()\n\nReturns the generated string.\n\n### s.trim([ charType ])\n\nTrims content matching `charType` (defaults to `\\s`, i.e. whitespace) from the start and end. Returns `this`.\n\n### s.trimStart([ charType ])\n\nTrims content matching `charType` (defaults to `\\s`, i.e. whitespace) from the start. Returns `this`.\n\n### s.trimEnd([ charType ])\n\nTrims content matching `charType` (defaults to `\\s`, i.e. whitespace) from the end. Returns `this`.\n\n### s.trimLines()\n\nRemoves empty lines from the start and end. Returns `this`.\n\n## Bundling\n\nTo concatenate several sources, use `MagicString.Bundle`:\n\n```js\nvar bundle = new MagicString.Bundle();\n\nbundle.addSource({\n  filename: 'foo.js',\n  content: new MagicString( 'var answer = 42;' )\n});\n\nbundle.addSource({\n  filename: 'bar.js',\n  content: new MagicString( 'console.log( answer )' )\n});\n\n// Advanced: a source can include an `indentExclusionRanges` property\n// alongside `filename` and `content`. This will be passed to `s.indent()`\n// - see documentation above\n\nbundle.indent() // optionally, pass an indent string, otherwise it will be guessed\n  .prepend( '(function () {\\n' )\n  .append( '}());' );\n\nbundle.toString();\n// (function () {\n//   var answer = 42;\n//   console.log( answer );\n// }());\n\n// options are as per `s.generateMap()` above\nvar map = bundle.generateMap({\n  file: 'bundle.js',\n  includeContent: true,\n  hires: true\n});\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rich-harris/magic-string/issues"
  },
  "homepage": "https://github.com/rich-harris/magic-string#readme",
  "_id": "magic-string@0.4.9",
  "_from": "magic-string@>=0.4.9 <0.5.0"
}
