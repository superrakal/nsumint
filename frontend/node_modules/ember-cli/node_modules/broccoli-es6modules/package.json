{
  "name": "broccoli-es6modules",
  "version": "0.6.1",
  "description": "An es6 module transpiler & concatenator for broccoli.",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ember-cli/broccoli-es6modules.git"
  },
  "author": {
    "name": "Edward Faulkner",
    "email": "ef@alum.mit.edu"
  },
  "license": "MIT",
  "dependencies": {
    "broccoli-caching-writer": "0.5.3",
    "broccoli-kitchen-sink-helpers": "^0.2.7",
    "esperanto": "^0.6.8",
    "mkdirp": "^0.5.0",
    "rsvp": "^3.0.16",
    "walk-sync": "^0.1.3"
  },
  "devDependencies": {
    "broccoli": "^0.13.3",
    "chai": "^1.10.0",
    "mocha": "^2.0.1"
  },
  "readme": "#broccoli-es6modules\n\nES6Modules is a broccoli filter that transpiles source code in a\nproject from ES6 modules to ES5 modules in AMD, CJS, or UMD styles.\n\nES6Modules has two modes of transpilation: 1-to-1 (per-file) and n-to-1 (bundled);\n\n## 1-to-1 transpiles\n\n1-to-1 mode transpiles every file in a tree from ES6 to the format specified\nas the `format` option.\n\nFor example, if you have the following directory:\n\n```shell\nsrc/\n├── lib\n│   ├── promise.js\n│   ├── rsvp.js\n│   └── utils.js\n└── main.js\n```\n\nAnd convert the files using ES6Modules:\n\n```javascript\nvar tree = './src';\nvar ES6Modules = require('broccoli-es6modules');\nvar amdFiles = new ES6Modules(tree, {\n  format: 'amd'\n});\n```\n\nYou will have the following tree in your compiled output\n\n\n```shell\n├── lib\n│   ├── promise.js\n│   ├── rsvp.js\n│   └── utils.js\n└── main.js\n```\n\nAnd each file's contents will be converted from ES6 module syntax to AMD style.\n\n## n-to-1 bundled transpiles\n\nn-to-1 mode begins transpiling at a single entry point and walks the dependency graph starting\nwith the imported statements in the entry point.\n\nThis will result in a single, bundled file for your library containing any\nfiles referenced by `import` statements. Enable this mode by supplying a\n`bundleOptions` option with (at least) a `name` for your resulting file and a\nfile to be the `entry` point:\n\nFor example, if you have the following directory:\n\n```shell\nsrc/\n├── lib\n│   ├── promise.js\n│   ├── rsvp.js\n│   └── utils.js\n└── main.js\n```\n\nAnd convert these files using ES6Modules:\n\n```javascript\nvar tree = './src';\nvar ES6Modules = require('broccoli-es6modules');\nvar amdFiles = new ES6Modules(tree, {\n  format: 'amd',\n  bundleOptions: {\n    entry: 'main.js',\n    name: 'myLib'\n  }\n});\n```\n\nYou will have the following tree in your compiled output\n\n\n```shell\n└── myLib.js\n```\n\nThe contents of that file will be any code imported from `main.js`'s import process.\n\n## Options\n\n### format\nThe ES5 module format to convert to. Available options are:\n\n  * ['amd'](http://requirejs.org/docs/whyamd.html#amd)\n  * ['namedAmd'](http://requirejs.org/docs/whyamd.html#namedmodules)\n  * ['cjs'](http://requirejs.org/docs/whyamd.html#commonjs)\n  * ['umd'](https://github.com/umdjs/umd)\n\n\nIn `namedAmd` the file path (with '.js' removed) of the file relative to the tree root\nis used as the module's name.\n\nSo, if you have the following tree:\n\n```\n\n├── inner\n│   └── first.js\n└── outer.js\n```\n\nYou will have the following module names passed to AMD's `define` call:\n'bundle', 'inner/first', and  'outer'.\n\nBecause this strategy combined with UMD would result in _many_ properties being set on\nthe `window` object in the browser, `umd` format will throw an error if used without also\nproviding `bundleOptions`.\n\n### esperantoOptions\nES6Modules wraps the [esperanto](http://esperantojs.org/) library. All [options described for\nesperanto](https://github.com/esperantojs/esperanto/wiki/Converting-a-single-module#options)\ncan be provided here. All defaults are identical to those used by esperanto.\n\nBecause the ES6Modules uses each file's name as its module name, the esperanto `amdName` and\n`sourceMapSource` options are ignored.\n\n### bundleOptions\nES6Modules wraps the [esperanto](http://esperantojs.org/) library. All [options described for\nesperanto bundling](https://github.com/esperantojs/esperanto/wiki/Bundling-multiple-ES6-modules#other-formats-and-options)\ncan be provided here. All defaults are identical to those used by esperanto.\n\nThe value you provide for `esperantoOptions` will be passed to result of bundling, resulting\nin a single output file.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ember-cli/broccoli-es6modules/issues"
  },
  "homepage": "https://github.com/ember-cli/broccoli-es6modules#readme",
  "_id": "broccoli-es6modules@0.6.1",
  "_from": "broccoli-es6modules@>=0.6.0 <0.7.0"
}
