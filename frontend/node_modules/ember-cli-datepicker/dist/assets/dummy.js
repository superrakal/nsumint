define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/components/date-picker', ['exports', 'ember', 'ember-cli-datepicker/components/date-picker'], function (exports, Em, Datepicker) {

	'use strict';

	exports['default'] = Datepicker['default'];

});
define('dummy/controllers/index', ['exports', 'ember'], function (exports, Em) {

  'use strict';

  exports['default'] = Em['default'].Controller.extend({
    date: "2014-02-01",
    formattedDate: (function () {
      return window.moment(this.get("date"), "YYYY-MM-DD").format("DD/MM/YYYY");
    }).property("date"),
    timestamp: (function () {
      return window.moment(this.get("date"), "YYYY-MM-DD").format("X");
    }).property("date"),
    jsDate: new Date(),
    jsUTCString: (function () {
      return this.get("jsDate").toUTCString();
    }).property("jsDate")
  });

});
define('dummy/ember-cli-datepicker/tests/ember-cli-datepicker/components/date-picker.jshint', function () {

  'use strict';

  module("JSHint - ember-cli-datepicker/components");
  test("ember-cli-datepicker/components/date-picker.js should pass jshint", function () {
    ok(true, "ember-cli-datepicker/components/date-picker.js should pass jshint.");
  });

});
define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;

  exports['default'] = {
    name: "App Version",
    initialize: function (container, application) {
      var appName = classify(application.toString());
      Ember['default'].libraries.register(appName, config['default'].APP.version);
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal) {
      window[classifiedName] = application;
    }
  };

  exports['default'] = {
    name: "export-application-global",

    initialize: initialize
  };

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {});

  exports['default'] = Router;

});
define('dummy/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }
        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('dummy/templates/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","float: left");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h6");
        var el3 = dom.createTextNode("Date from string");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","float: right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dl");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("dt");
        var el4 = dom.createTextNode("Formatted date");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("dd");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("dt");
        var el4 = dom.createTextNode("Timestamp");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("dd");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","clear: both");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","float: left");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h6");
        var el3 = dom.createTextNode("Date from javascript date (Week starting monday)");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","float: right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dl");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("dt");
        var el4 = dom.createTextNode("UTC String");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("dd");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),2,3);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [2]),-1,-1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),-1,-1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [8]),2,3);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [10, 1, 2]),-1,-1);
        inline(env, morph0, context, "date-picker", [], {"date": get(env, context, "date"), "valueFormat": "YYYY-MM-DD", "numberOfMonths": 3});
        content(env, morph1, context, "formattedDate");
        content(env, morph2, context, "timestamp");
        inline(env, morph3, context, "date-picker", [], {"date": get(env, context, "jsDate"), "valueFormat": "date", "firstDay": 1, "format": "dd Do MMM 'YY'", "yearRange": "2013,2015"});
        content(env, morph4, context, "jsUTCString");
        return fragment;
      }
    };
  }()));

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/index.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/index.js should pass jshint', function() { 
    ok(true, 'controllers/index.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/misc-test', ['ember', 'dummy/tests/helpers/start-app', 'ember-qunit'], function (Ember, startApp, ember_qunit) {

  'use strict';

  /* global moment */
  var App, component;

  ember_qunit.moduleForComponent("date-picker", "ember-cli-datepicker integration", {
    setup: function () {
      App = startApp['default']();
    },
    teardown: function () {
      Ember['default'].run(App, "destroy");
      // clear up component (this should be done by ember-qunit soon!)
      if (component) {
        Ember['default'].run(component, "destroy");
        component = null;
      }
    }
  });

  ember_qunit.test("it shows the picker on input focus, then hides it after click outside", function () {
    expect(3);
    component = this.subject();

    // initial render
    this.$();

    equal($(".pika-single").hasClass("is-hidden"), true, "date picker is initially hidden");

    click(this.$());
    andThen(function () {
      equal($(".pika-single").hasClass("is-hidden"), false, "date picker is visible");
      click(document.body);
    });
    andThen(function () {
      equal($(".pika-single").hasClass("is-hidden"), true, "date picker is hidden again");
    });
  });

});
define('dummy/tests/integration/misc-test.jshint', function () {

  'use strict';

  module('JSHint - integration');
  test('integration/misc-test.js should pass jshint', function() { 
    ok(true, 'integration/misc-test.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/date-picker-component-test', ['ember', 'dummy/tests/helpers/start-app', 'ember-qunit'], function (Ember, startApp, ember_qunit) {

  'use strict';

  /* global moment */
  var App, component;

  ember_qunit.moduleForComponent("date-picker", "ember-cli-datepicker component", {
    setup: function () {
      App = startApp['default']();
    },
    teardown: function () {
      Ember['default'].run(App, "destroy");
      // clear up component (this should be done by ember-qunit soon!)
      if (component) {
        Ember['default'].run(component, "destroy");
        component = null;
      }
    }
  });

  /**
   * Test initially displayed date with default and custon `format` and also
   * with the `allowBlank` option
   */
  ember_qunit.test("it displays today's date with default format when no date is set", function () {
    expect(1);
    component = this.subject();
    var formattedDate = moment().format(component.get("format"));

    equal(this.$().val(), formattedDate, "displays date");
  });

  ember_qunit.test("it displays today's date with custom `format` when no date is set", function () {
    expect(1);
    component = this.subject({
      format: "DD.MM.YY"
    });
    var formattedDate = moment().format("DD.MM.YY");

    equal(this.$().val(), formattedDate, "displays date with custom format");
  });

  ember_qunit.test("it displays nothing when no date is set and `allowBlank: true`", function () {
    expect(1);
    component = this.subject({
      allowBlank: true
    });

    equal(this.$().val(), "", "input is empty");
  });


  /**
   * Test whether opening and closing the date picker affects the bound date value
   * with and without `allowBlank`
   */
  ember_qunit.test("it sets bound date after open + close", function () {
    expect(2);
    component = this.subject({
      allowBlank: false
    });

    this.$();
    var todaysDate = moment().format(component.get("valueFormat"));
    equal(component.get("date"), todaysDate, "has initial date of today");

    // simulate open + close of picker
    component.get("_picker").show();
    component.get("_picker").hide();

    ok(component.get("date"), "has a date");
  });

  ember_qunit.test("it does not set bound date after open + close when `allowBlank: true`", function () {
    expect(2);
    component = this.subject({
      allowBlank: true
    });

    // initial render
    this.$();
    equal(component.get("date"), null, "has no initial date");

    // simulate open + close of picker
    component.get("_picker").show();
    component.get("_picker").hide();

    equal(component.get("date"), null, "still has no date");
  });


  /**
   * Misc
   */
  ember_qunit.test("it shows date picker after click on input field", function () {
    expect(2);
    component = this.subject();

    // initial render
    this.$();

    equal($(".pika-single").hasClass("is-hidden"), true, "date picker is initially hidden");

    click(this.$());

    andThen(function () {
      equal($(".pika-single").hasClass("is-hidden"), false, "date picker is shown");
    });
  });

  ember_qunit.test("it updates displayed value when bound date changes", function () {
    expect(1);
    component = this.subject();

    // initial render
    this.$();

    component.set("date", moment("2000-01-01").format("X"));

    equal(this.$().val(), "2000-01-01", "displays new date");
  });


  /**
   * Test custom `format` with complex format and custom `valueFormat` with
   * custom string format and "date" format which causes the output of a real
   * JS Date object
   */
  ember_qunit.test("it respects `format` when parsing date value", function () {
    expect(1);
    component = this.subject({
      format: "dddd, MMMM Do YYYY"
    });
    var formattedDate = moment("2000-01-01").format("dddd, MMMM Do YYYY");

    fillIn(this.$(), formattedDate);

    andThen(function () {
      // simulate open + close of picker
      component.get("_picker").show();
      component.get("_picker").hide();
      equal(component.get("date"), moment("2000-01-01").format("X"), "sets correct date");
    });
  });

  ember_qunit.test("it respects `valueFormat: 'date'` when setting date value", function () {
    expect(1);
    component = this.subject({
      valueFormat: "date"
    });

    fillIn(this.$(), "2000-01-01");

    andThen(function () {
      // simulate open + close of picker
      component.get("_picker").show();
      component.get("_picker").hide();

      equal(component.get("date").toString(), moment("2000-01-01").toDate().toString(), "sets correct date");
    });
  });

  ember_qunit.test("it respects `valueFormat` when setting date value", function () {
    expect(1);
    component = this.subject({
      valueFormat: "dddd, MMMM Do YYYY"
    });

    fillIn(this.$(), "2000-01-01");

    andThen(function () {
      // simulate open + close of picker
      component.get("_picker").show();
      component.get("_picker").hide();

      equal(component.get("date"), moment("2000-01-01").format("dddd, MMMM Do YYYY"), "sets currect date");
    });
  });

  /**
   * Test `utc` option that creates date objects in UTC mode.
   */
  ember_qunit.test("it creates UTC timestamp when `utc: true`", function () {
    expect(2);
    component = this.subject();

    fillIn(this.$(), "2000-01-01");

    andThen(function () {
      // simulate open + close of picker
      component.get("_picker").show();
      component.get("_picker").hide();

      // actual UTC unix timestamp of "2000-01-01, 00:00:00"
      var unixTimestamp2000 = 946684800;

      // without utc = true, expect timestamp that differs from UTC unix timestamp
      // by the current timezoneOffset in seconds
      equal(component.get("date"), unixTimestamp2000 + new Date().getTimezoneOffset() * 60, "outputs timestamp that differs by timezoneOffset when utc = false");

      component.set("utc", true);

      // simulate open + close of picker
      component.get("_picker").show();
      component.get("_picker").hide();

      equal(component.get("date"), unixTimestamp2000, "outputs exact timestamp of date when utc = true");
    });
  });

  ember_qunit.test("it creates UTC date object when `utc: true`", function () {
    expect(2);
    component = this.subject({
      valueFormat: "date"
    });

    fillIn(this.$(), "2000-01-01");

    andThen(function () {
      // simulate open + close of picker
      component.get("_picker").show();
      component.get("_picker").hide();

      equal(component.get("date").toISOString(), moment("2000-01-01").toDate().toISOString(), "outputs regular date that equals locally generated date when utc = false");

      component.set("utc", true);

      // simulate open + close of picker again
      component.get("_picker").show();
      component.get("_picker").hide();

      equal(component.get("date").toISOString(), "2000-01-01T00:00:00.000Z", "outputs regular date that equals utc date when utc = true");
    });
  });

  /**
   * Test `yearRange` for both string and array
   */
  ember_qunit.test("it sets correct year range for relative string", function () {
    expect(2);
    component = this.subject({
      yearRange: "-2, 3"
    });

    var cy = window.moment().year(),
        expectedResult = [cy - 2, cy + 3];

    equal(component.get("_yearRange")[0], expectedResult[0], "start date");
    equal(component.get("_yearRange")[1], expectedResult[1], "end date");
  });

  ember_qunit.test("it sets correct year range for absolute string", function () {
    expect(2);
    component = this.subject({
      yearRange: "2000, 2020"
    });

    equal(component.get("_yearRange")[0], 2000, "start date");
    equal(component.get("_yearRange")[1], 2020, "end date");
  });

  ember_qunit.test("it sets correct year range for relative array", function () {
    expect(2);
    component = this.subject({
      yearRange: ["-2", 3]
    });

    var cy = window.moment().year(),
        expectedResult = [cy - 2, cy + 3];

    equal(component.get("_yearRange")[0], expectedResult[0], "start date");
    equal(component.get("_yearRange")[1], expectedResult[1], "end date");
  });

  ember_qunit.test("it sets correct year range for absolute array", function () {
    expect(2);
    component = this.subject({
      yearRange: [2000, "2020"]
    });

    equal(component.get("_yearRange")[0], 2000, "start date");
    equal(component.get("_yearRange")[1], 2020, "end date");
  });

});
define('dummy/tests/unit/date-picker-component-test.jshint', function () {

  'use strict';

  module('JSHint - unit');
  test('unit/date-picker-component-test.js should pass jshint', function() { 
    ok(true, 'unit/date-picker-component-test.js should pass jshint.'); 
  });

});
/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"name":"ember-cli-datepicker","version":"1.3.4.2aed596a"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map