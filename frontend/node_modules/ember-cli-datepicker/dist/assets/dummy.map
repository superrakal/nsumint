{"version":3,"sources":["dummy/app.js","dummy/components/date-picker.js","dummy/controllers/index.js","dummy/ember-cli-datepicker/tests/ember-cli-datepicker/components/date-picker.jshint.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/templates/application.js","dummy/templates/index.js","dummy/tests/app.jshint.js","dummy/tests/controllers/index.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/integration/misc-test.js","dummy/tests/integration/misc-test.jshint.js","dummy/tests/router.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/date-picker-component-test.js","dummy/tests/unit/date-picker-component-test.jshint.js","vendor/ember-cli/app-suffix.js"],"sourcesContent":["define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/components/date-picker', ['exports', 'ember', 'ember-cli-datepicker/components/date-picker'], function (exports, Em, Datepicker) {\n\n\t'use strict';\n\n\texports['default'] = Datepicker['default'];\n\n});","define('dummy/controllers/index', ['exports', 'ember'], function (exports, Em) {\n\n  'use strict';\n\n  exports['default'] = Em['default'].Controller.extend({\n    date: \"2014-02-01\",\n    formattedDate: (function () {\n      return window.moment(this.get(\"date\"), \"YYYY-MM-DD\").format(\"DD/MM/YYYY\");\n    }).property(\"date\"),\n    timestamp: (function () {\n      return window.moment(this.get(\"date\"), \"YYYY-MM-DD\").format(\"X\");\n    }).property(\"date\"),\n    jsDate: new Date(),\n    jsUTCString: (function () {\n      return this.get(\"jsDate\").toUTCString();\n    }).property(\"jsDate\")\n  });\n\n});","define('dummy/ember-cli-datepicker/tests/ember-cli-datepicker/components/date-picker.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - ember-cli-datepicker/components\");\n  test(\"ember-cli-datepicker/components/date-picker.js should pass jshint\", function () {\n    ok(true, \"ember-cli-datepicker/components/date-picker.js should pass jshint.\");\n  });\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function (container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal) {\n      window[classifiedName] = application;\n    }\n  };\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"float: left\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h6\");\n        var el3 = dom.createTextNode(\"Date from string\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"float: right\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"dl\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"dt\");\n        var el4 = dom.createTextNode(\"Formatted date\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"dd\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"dt\");\n        var el4 = dom.createTextNode(\"Timestamp\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"dd\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"clear: both\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"hr\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"float: left\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h6\");\n        var el3 = dom.createTextNode(\"Date from javascript date (Week starting monday)\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"float: right\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"dl\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"dt\");\n        var el4 = dom.createTextNode(\"UTC String\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"dd\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [2, 1]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),2,3);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [2]),-1,-1);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),-1,-1);\n        var morph3 = dom.createMorphAt(dom.childAt(fragment, [8]),2,3);\n        var morph4 = dom.createMorphAt(dom.childAt(fragment, [10, 1, 2]),-1,-1);\n        inline(env, morph0, context, \"date-picker\", [], {\"date\": get(env, context, \"date\"), \"valueFormat\": \"YYYY-MM-DD\", \"numberOfMonths\": 3});\n        content(env, morph1, context, \"formattedDate\");\n        content(env, morph2, context, \"timestamp\");\n        inline(env, morph3, context, \"date-picker\", [], {\"date\": get(env, context, \"jsDate\"), \"valueFormat\": \"date\", \"firstDay\": 1, \"format\": \"dd Do MMM 'YY'\", \"yearRange\": \"2013,2015\"});\n        content(env, morph4, context, \"jsUTCString\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/index.js should pass jshint', function() { \n    ok(true, 'controllers/index.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/misc-test', ['ember', 'dummy/tests/helpers/start-app', 'ember-qunit'], function (Ember, startApp, ember_qunit) {\n\n  'use strict';\n\n  /* global moment */\n  var App, component;\n\n  ember_qunit.moduleForComponent(\"date-picker\", \"ember-cli-datepicker integration\", {\n    setup: function () {\n      App = startApp['default']();\n    },\n    teardown: function () {\n      Ember['default'].run(App, \"destroy\");\n      // clear up component (this should be done by ember-qunit soon!)\n      if (component) {\n        Ember['default'].run(component, \"destroy\");\n        component = null;\n      }\n    }\n  });\n\n  ember_qunit.test(\"it shows the picker on input focus, then hides it after click outside\", function () {\n    expect(3);\n    component = this.subject();\n\n    // initial render\n    this.$();\n\n    equal($(\".pika-single\").hasClass(\"is-hidden\"), true, \"date picker is initially hidden\");\n\n    click(this.$());\n    andThen(function () {\n      equal($(\".pika-single\").hasClass(\"is-hidden\"), false, \"date picker is visible\");\n      click(document.body);\n    });\n    andThen(function () {\n      equal($(\".pika-single\").hasClass(\"is-hidden\"), true, \"date picker is hidden again\");\n    });\n  });\n\n});","define('dummy/tests/integration/misc-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - integration');\n  test('integration/misc-test.js should pass jshint', function() { \n    ok(true, 'integration/misc-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/date-picker-component-test', ['ember', 'dummy/tests/helpers/start-app', 'ember-qunit'], function (Ember, startApp, ember_qunit) {\n\n  'use strict';\n\n  /* global moment */\n  var App, component;\n\n  ember_qunit.moduleForComponent(\"date-picker\", \"ember-cli-datepicker component\", {\n    setup: function () {\n      App = startApp['default']();\n    },\n    teardown: function () {\n      Ember['default'].run(App, \"destroy\");\n      // clear up component (this should be done by ember-qunit soon!)\n      if (component) {\n        Ember['default'].run(component, \"destroy\");\n        component = null;\n      }\n    }\n  });\n\n  /**\n   * Test initially displayed date with default and custon `format` and also\n   * with the `allowBlank` option\n   */\n  ember_qunit.test(\"it displays today's date with default format when no date is set\", function () {\n    expect(1);\n    component = this.subject();\n    var formattedDate = moment().format(component.get(\"format\"));\n\n    equal(this.$().val(), formattedDate, \"displays date\");\n  });\n\n  ember_qunit.test(\"it displays today's date with custom `format` when no date is set\", function () {\n    expect(1);\n    component = this.subject({\n      format: \"DD.MM.YY\"\n    });\n    var formattedDate = moment().format(\"DD.MM.YY\");\n\n    equal(this.$().val(), formattedDate, \"displays date with custom format\");\n  });\n\n  ember_qunit.test(\"it displays nothing when no date is set and `allowBlank: true`\", function () {\n    expect(1);\n    component = this.subject({\n      allowBlank: true\n    });\n\n    equal(this.$().val(), \"\", \"input is empty\");\n  });\n\n\n  /**\n   * Test whether opening and closing the date picker affects the bound date value\n   * with and without `allowBlank`\n   */\n  ember_qunit.test(\"it sets bound date after open + close\", function () {\n    expect(2);\n    component = this.subject({\n      allowBlank: false\n    });\n\n    this.$();\n    var todaysDate = moment().format(component.get(\"valueFormat\"));\n    equal(component.get(\"date\"), todaysDate, \"has initial date of today\");\n\n    // simulate open + close of picker\n    component.get(\"_picker\").show();\n    component.get(\"_picker\").hide();\n\n    ok(component.get(\"date\"), \"has a date\");\n  });\n\n  ember_qunit.test(\"it does not set bound date after open + close when `allowBlank: true`\", function () {\n    expect(2);\n    component = this.subject({\n      allowBlank: true\n    });\n\n    // initial render\n    this.$();\n    equal(component.get(\"date\"), null, \"has no initial date\");\n\n    // simulate open + close of picker\n    component.get(\"_picker\").show();\n    component.get(\"_picker\").hide();\n\n    equal(component.get(\"date\"), null, \"still has no date\");\n  });\n\n\n  /**\n   * Misc\n   */\n  ember_qunit.test(\"it shows date picker after click on input field\", function () {\n    expect(2);\n    component = this.subject();\n\n    // initial render\n    this.$();\n\n    equal($(\".pika-single\").hasClass(\"is-hidden\"), true, \"date picker is initially hidden\");\n\n    click(this.$());\n\n    andThen(function () {\n      equal($(\".pika-single\").hasClass(\"is-hidden\"), false, \"date picker is shown\");\n    });\n  });\n\n  ember_qunit.test(\"it updates displayed value when bound date changes\", function () {\n    expect(1);\n    component = this.subject();\n\n    // initial render\n    this.$();\n\n    component.set(\"date\", moment(\"2000-01-01\").format(\"X\"));\n\n    equal(this.$().val(), \"2000-01-01\", \"displays new date\");\n  });\n\n\n  /**\n   * Test custom `format` with complex format and custom `valueFormat` with\n   * custom string format and \"date\" format which causes the output of a real\n   * JS Date object\n   */\n  ember_qunit.test(\"it respects `format` when parsing date value\", function () {\n    expect(1);\n    component = this.subject({\n      format: \"dddd, MMMM Do YYYY\"\n    });\n    var formattedDate = moment(\"2000-01-01\").format(\"dddd, MMMM Do YYYY\");\n\n    fillIn(this.$(), formattedDate);\n\n    andThen(function () {\n      // simulate open + close of picker\n      component.get(\"_picker\").show();\n      component.get(\"_picker\").hide();\n      equal(component.get(\"date\"), moment(\"2000-01-01\").format(\"X\"), \"sets correct date\");\n    });\n  });\n\n  ember_qunit.test(\"it respects `valueFormat: 'date'` when setting date value\", function () {\n    expect(1);\n    component = this.subject({\n      valueFormat: \"date\"\n    });\n\n    fillIn(this.$(), \"2000-01-01\");\n\n    andThen(function () {\n      // simulate open + close of picker\n      component.get(\"_picker\").show();\n      component.get(\"_picker\").hide();\n\n      equal(component.get(\"date\").toString(), moment(\"2000-01-01\").toDate().toString(), \"sets correct date\");\n    });\n  });\n\n  ember_qunit.test(\"it respects `valueFormat` when setting date value\", function () {\n    expect(1);\n    component = this.subject({\n      valueFormat: \"dddd, MMMM Do YYYY\"\n    });\n\n    fillIn(this.$(), \"2000-01-01\");\n\n    andThen(function () {\n      // simulate open + close of picker\n      component.get(\"_picker\").show();\n      component.get(\"_picker\").hide();\n\n      equal(component.get(\"date\"), moment(\"2000-01-01\").format(\"dddd, MMMM Do YYYY\"), \"sets currect date\");\n    });\n  });\n\n  /**\n   * Test `utc` option that creates date objects in UTC mode.\n   */\n  ember_qunit.test(\"it creates UTC timestamp when `utc: true`\", function () {\n    expect(2);\n    component = this.subject();\n\n    fillIn(this.$(), \"2000-01-01\");\n\n    andThen(function () {\n      // simulate open + close of picker\n      component.get(\"_picker\").show();\n      component.get(\"_picker\").hide();\n\n      // actual UTC unix timestamp of \"2000-01-01, 00:00:00\"\n      var unixTimestamp2000 = 946684800;\n\n      // without utc = true, expect timestamp that differs from UTC unix timestamp\n      // by the current timezoneOffset in seconds\n      equal(component.get(\"date\"), unixTimestamp2000 + new Date().getTimezoneOffset() * 60, \"outputs timestamp that differs by timezoneOffset when utc = false\");\n\n      component.set(\"utc\", true);\n\n      // simulate open + close of picker\n      component.get(\"_picker\").show();\n      component.get(\"_picker\").hide();\n\n      equal(component.get(\"date\"), unixTimestamp2000, \"outputs exact timestamp of date when utc = true\");\n    });\n  });\n\n  ember_qunit.test(\"it creates UTC date object when `utc: true`\", function () {\n    expect(2);\n    component = this.subject({\n      valueFormat: \"date\"\n    });\n\n    fillIn(this.$(), \"2000-01-01\");\n\n    andThen(function () {\n      // simulate open + close of picker\n      component.get(\"_picker\").show();\n      component.get(\"_picker\").hide();\n\n      equal(component.get(\"date\").toISOString(), moment(\"2000-01-01\").toDate().toISOString(), \"outputs regular date that equals locally generated date when utc = false\");\n\n      component.set(\"utc\", true);\n\n      // simulate open + close of picker again\n      component.get(\"_picker\").show();\n      component.get(\"_picker\").hide();\n\n      equal(component.get(\"date\").toISOString(), \"2000-01-01T00:00:00.000Z\", \"outputs regular date that equals utc date when utc = true\");\n    });\n  });\n\n  /**\n   * Test `yearRange` for both string and array\n   */\n  ember_qunit.test(\"it sets correct year range for relative string\", function () {\n    expect(2);\n    component = this.subject({\n      yearRange: \"-2, 3\"\n    });\n\n    var cy = window.moment().year(),\n        expectedResult = [cy - 2, cy + 3];\n\n    equal(component.get(\"_yearRange\")[0], expectedResult[0], \"start date\");\n    equal(component.get(\"_yearRange\")[1], expectedResult[1], \"end date\");\n  });\n\n  ember_qunit.test(\"it sets correct year range for absolute string\", function () {\n    expect(2);\n    component = this.subject({\n      yearRange: \"2000, 2020\"\n    });\n\n    equal(component.get(\"_yearRange\")[0], 2000, \"start date\");\n    equal(component.get(\"_yearRange\")[1], 2020, \"end date\");\n  });\n\n  ember_qunit.test(\"it sets correct year range for relative array\", function () {\n    expect(2);\n    component = this.subject({\n      yearRange: [\"-2\", 3]\n    });\n\n    var cy = window.moment().year(),\n        expectedResult = [cy - 2, cy + 3];\n\n    equal(component.get(\"_yearRange\")[0], expectedResult[0], \"start date\");\n    equal(component.get(\"_yearRange\")[1], expectedResult[1], \"end date\");\n  });\n\n  ember_qunit.test(\"it sets correct year range for absolute array\", function () {\n    expect(2);\n    component = this.subject({\n      yearRange: [2000, \"2020\"]\n    });\n\n    equal(component.get(\"_yearRange\")[0], 2000, \"start date\");\n    equal(component.get(\"_yearRange\")[1], 2020, \"end date\");\n  });\n\n});","define('dummy/tests/unit/date-picker-component-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit');\n  test('unit/date-picker-component-test.js should pass jshint', function() { \n    ok(true, 'unit/date-picker-component-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-cli-datepicker\",\"version\":\"1.3.4.2aed596a\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfile":"dummy.js"}