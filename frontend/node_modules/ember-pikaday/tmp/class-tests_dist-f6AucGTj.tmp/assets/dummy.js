define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/components/pikaday-input', ['exports', 'ember', 'ember-pikaday/components/pikaday-input'], function (exports, Ember, PikadayInputComponent) {

	'use strict';

	exports['default'] = PikadayInputComponent['default'];

});
define('dummy/ember-pikaday/tests/ember-pikaday/components/pikaday-input.jshint', function () {

  'use strict';

  module("JSHint - ember-pikaday/components");
  test("ember-pikaday/components/pikaday-input.js should pass jshint", function () {
    ok(true, "ember-pikaday/components/pikaday-input.js should pass jshint.");
  });

});
define('dummy/ember-pikaday/tests/ember-pikaday/helpers/pikaday.jshint', function () {

  'use strict';

  module("JSHint - ember-pikaday/helpers");
  test("ember-pikaday/helpers/pikaday.js should pass jshint", function () {
    ok(true, "ember-pikaday/helpers/pikaday.js should pass jshint.");
  });

});
define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;

  exports['default'] = {
    name: "App Version",
    initialize: function (container, application) {
      var appName = classify(application.toString());
      Ember['default'].libraries.register(appName, config['default'].APP.version);
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal) {
      window[classifiedName] = application;
    }
  };

  exports['default'] = {
    name: "export-application-global",

    initialize: initialize
  };

});
define('dummy/initializers/setup-pikaday-i18n', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /* globals moment */

  exports['default'] = {
    name: "setup-pikaday-i18n",
    initialize: function (container, application) {
      var i18n = Ember['default'].Object.extend({
        previousMonth: "Vorheriger Monat",
        nextMonth: "Nächster Monat",
        months: moment.localeData()._months,
        weekdays: moment.localeData()._weekdays,
        weekdaysShort: moment.localeData()._weekdaysShort
      });

      container.register("pikaday-i18n:main", i18n, { singleton: true });
      application.inject("component:pikaday-input", "i18n", "pikaday-i18n:main");
    }
  };

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {});

  exports['default'] = Router;

});
define('dummy/templates/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push("<h2 id='title'>Welcome to Ember.js</h2>\n\n");
    stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    data.buffer.push(escapeExpression((helper = helpers['pikaday-input'] || (depth0 && depth0['pikaday-input']),options={hash:{
      'format': ("dddd MMMM Do YYYY, h:mm:ss a")
    },hashTypes:{'format': "STRING"},hashContexts:{'format': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "pikaday-input", options))));
    data.buffer.push("\n");
    return buffer;
    
  });

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/initializers/setup-pikaday-i18n.jshint', function () {

  'use strict';

  module('JSHint - initializers');
  test('initializers/setup-pikaday-i18n.js should pass jshint', function() { 
    ok(true, 'initializers/setup-pikaday-i18n.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/pikaday-input-test', ['ember-qunit', 'ember', 'ember-pikaday/helpers/pikaday'], function (ember_qunit, Ember, pikaday) {

  'use strict';

  ember_qunit.moduleForComponent("pikaday-input", "PikadayInputComponent");

  ember_qunit.test("is an input tag", function (assert) {
    assert.equal("INPUT", this.$().prop("tagName"));
  });

  ember_qunit.test("the input tag has the readonly attribute if it has been set on the component", function (assert) {
    var component = this.subject();
    component.set("readonly", true);

    assert.ok(this.$().is("[readonly]"));
  });

  ember_qunit.test("clicking the input opens the pikaday dialog", function (assert) {
    var $input = this.render();

    assert.ok($(".pika-single").hasClass("is-hidden"));
    pikaday.openDatepicker($input);
    assert.ok(!$(".pika-single").hasClass("is-hidden"));
  });

  ember_qunit.test("selecting a date should update the value attribute", function (assert) {
    var component = this.subject();
    var $input = this.render();
    var interactor = pikaday.openDatepicker($input);

    interactor.selectDate(new Date(2013, 3, 28));

    var date = this.subject().get("value");

    assert.equal(date.getFullYear(), 2013);
    assert.equal(date.getMonth(), 3);
    assert.equal(date.getDate(), 28);
  });

  ember_qunit.test("setting the value attribute should select the correct date", function (assert) {
    var $input = this.render();

    this.subject().set("value", new Date(2010, 7, 10));
    var interactor = pikaday.openDatepicker($input);

    assert.equal(interactor.selectedYear(), 2010);
    assert.equal(interactor.selectedMonth(), 7);
    assert.equal(interactor.selectedDay(), 10);
  });

  ember_qunit.test("DD.MM.YYYY should be the default format for the input", function (assert) {
    var $input = this.render();
    this.subject().set("value", new Date(2010, 7, 10));

    assert.equal($input.val(), "10.08.2010");
  });

  ember_qunit.test("format of the input is changeable", function (assert) {
    this.subject().set("format", "YYYY.DD.MM");
    var $input = this.render();
    this.subject().set("value", new Date(2010, 7, 10));

    assert.equal($input.val(), "2010.10.08");
  });

  ember_qunit.test("default i18n configuration of Pikaday can be changed", function (assert) {
    var component = this.subject({
      i18n: {
        previousMonth: "Vorheriger Monat",
        nextMonth: "Nächster Monat",
        months: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        weekdays: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
        weekdaysShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
      }
    });

    var $input = this.render();

    component.set("value", new Date(2014, 2, 10));
    pikaday.openDatepicker($input);

    assert.equal($(".pika-select-month option:selected").text(), "März");
  });

});
define('dummy/tests/unit/components/pikaday-input-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/pikaday-input-test.js should pass jshint', function() { 
    ok(true, 'unit/components/pikaday-input-test.js should pass jshint.'); 
  });

});
/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"LOG_ACTIVE_GENERATION":false,"LOG_VIEW_LOOKUPS":false,"rootElement":"#ember-testing","name":"ember-pikaday","version":"0.0.0.a54f915f"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map