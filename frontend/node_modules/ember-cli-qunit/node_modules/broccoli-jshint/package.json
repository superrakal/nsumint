{
  "name": "broccoli-jshint",
  "version": "0.5.6",
  "description": "Broccoli plugin run JSHint on a specific tree.",
  "main": "index.js",
  "author": {
    "name": "Robert Jackson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rwjblue/broccoli-jshint.git"
  },
  "scripts": {
    "test": "mocha tests/"
  },
  "keywords": [
    "broccoli-plugin",
    "jshint",
    "javascript"
  ],
  "dependencies": {
    "jshint": "^2.7.0",
    "chalk": "~0.4.0",
    "broccoli-filter": "^0.1.14",
    "findup-sync": "~0.1.3",
    "mkdirp": "~0.4.0"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "broccoli": "~0.13.0",
    "expect.js": "~0.3.1",
    "rimraf": "~2.2.6"
  },
  "gitHead": "f45aa1e1155bfefce1309cd2ecc0e27f90e12e7f",
  "bugs": {
    "url": "https://github.com/rwjblue/broccoli-jshint/issues"
  },
  "homepage": "https://github.com/rwjblue/broccoli-jshint",
  "_id": "broccoli-jshint@0.5.6",
  "_shasum": "5b711dac92608a944afefa3a9bd25914ceb12fe7",
  "_from": "broccoli-jshint@0.5.6",
  "_npmVersion": "2.7.5",
  "_nodeVersion": "1.6.4",
  "_npmUser": {
    "name": "rwjblue",
    "email": "me@rwjblue.com"
  },
  "dist": {
    "shasum": "5b711dac92608a944afefa3a9bd25914ceb12fe7",
    "tarball": "http://registry.npmjs.org/broccoli-jshint/-/broccoli-jshint-0.5.6.tgz"
  },
  "maintainers": [
    {
      "name": "rwjblue",
      "email": "robert.w.jackson@me.com"
    }
  ],
  "directories": {},
  "_resolved": "https://registry.npmjs.org/broccoli-jshint/-/broccoli-jshint-0.5.6.tgz",
  "readme": "# Broccoli JSHint\n\n[![Build Status](https://travis-ci.org/rwjblue/broccoli-jshint.svg?branch=master)](https://travis-ci.org/rwjblue/broccoli-jshint)\n\nRun JSHint on the provided tree.\n\n## Usage\n\n```javascript\nvar jshintTree = require('broccoli-jshint');\n\n// assuming someTree is a built up tree\nvar tree = jshintTree(someTree);\n```\n\n## Documentation\n\n### `jshintTree(inputTree, options)`\n\n---\n\n`options.jshintrcRoot` *{String}*\n\nWill look in the root of the provided tree for a `.jshintrc`. If you would prefer to use another specific root\nfor looking up your JSHint config, supply this option.\n\nDefault: **input tree root**\n\n---\n\n`options.jshintrcPath` *{String}*\n\nSpecify the path to the `.jshintrc` that you would like to use. Use this option if you would like to use a `.jshintrc`\nfile from a path that is not in the same heirarchy as your input tree (if it is use the `.jshintrcRoot`).\n\nDefault: **undefined**\n\n---\n\n`options.log` *{true|false}*\n\nShould we log errors to the console?\n\nDefault: **true**\n\n---\n\n`options.disableTestGenerator` *{true|false}*\n\nIf `true` tests will not be generated.\n\nDefault: **false**\n\n---\n\n`options.testGenerator` *{Function}*\n\nThe function used to generate test modules. You can provide a custom function for your client side testing framework of choice.\n\nThe function receives the following arguments:\n\n* `relativePath` - The relative path to the file being tested.\n* `errors` - A generated string of errors found.\n\nDefault generates QUnit style tests:\n\n```javascript\nvar path = require('path');\n\nfunction(relativePath, errors) {\n  return \"module('\" + path.dirname(relativePath) + '\");\";\n         \"test('\" + relativePath + \"' should pass jshint', function() { \" +\n         \"  ok(passed, moduleName+\" should pass jshint.\"+(errors ? \"\\n\"+errors : '')); \" +\n         \"});\n};\n```\n---\n\n`options.console` *{Object}*\n\nAllows you to provide a custom `console` object. This is useful if you have to supress console output in CI for example.\n\nDefault: **`console`**\n\n## ZOMG!!! TESTS?!?!!?\n\nI know, right?\n\nRunning the tests:\n\n```javascript\nnpm install\nnpm test\n```\n\n## License\n\nThis project is distributed under the MIT license.\n",
  "readmeFilename": "README.md"
}
