# fn = ->
#     annyr = if p1
#                 if p2
#                     1
#                 else
#                     2
#             else
#                 3

# for cmd of block_config
#     rules = block_config[cmd][i]
#     {
#         'disable': ->
#             disabled = disabled.concat(rules)
#         'enable': ->
#             difference(disabled, rules)
#             disabled = disabled_initially if rules.length is 0
#     }[cmd]() if rules?

# x = () ->
#     do ->
#         return 1234

# a
#     .b

# c = ->
#     return d + e

# ->
#     if a is c and
#         (false or
#             long.expression.that.necessitates(linebreak))
#         @foo()

# r = ->
#     if typeof p.lintToken is 'function'
#         e "'tokens' is required for 'lintToken'" unless p.tokens
#     else if typeof p.lintLine isnt 'function' and
#             typeof p.lintAST isnt 'function'
#         e "Rules must implement lintToken, lintLine, or lintAST"

# ->
#     if a is c and
#         (false or
#             long.expression.that.necessitates(linebreak))
#         @foo()

# r = unless p1
#     if p2
#         1
#     else
#         2
# else
#     3

# fn = ->
#     r = if p1
#             if p2
#                 1
#             else
#                 2
#         else
#             3

# x = () ->
#   try
#     divide("byZero")
#   catch error
#     log("uh oh")
#   finally
#     clean()

# r = ->
#   2
#  y
# class Something
#   constructor: ->
#     return $ '#something'

#   yo: ->

# class AnotherSomething
#   constructor: ->
#     return $ '#something'

# blah 'a'
# , blah('c', 'd')

# foo = () ->
#   # Culprit is here
#   $("<img>").attr(src: first.attr("src"), style: first.attr("style"))#\
#   .wrap("<div>")#\
#   .parent()#\
#   .html()

# bar = () ->
#   for el in getData()
#     if el.type == "img"
#       if el.content == ""
#         el.content = imgPlaceHolder
#     # But we get completely nonsensical errors here
#     else if el.type == "static" # Do nothing
#     else
#       $log.warn "Unknown DnD element type!", el.type

# rockinRockin
#         .around ->
#           3

# rockrockrock.
#         around ->
#           1234

# anObject
#     .firstChain (f) ->
#         doStepOne()
#         doAnotherStep()
#         prepSomethingElse()
#     .secondChain (s) ->
#         moreStuff()
#         return s

# r = unless p1
#   if p2
#     1
#   else
#     2
# else
#   3
# ->
#   r = unless p1
#     if p2
#       1
#     else
#       2
#   else
#     3

# x = () ->
#   y = () ->
#     1234

# # foo = () ->
# #   # Culprit is here
# #   $("<img>").attr(src: first.attr("src"), style: first.attr("style"))#\
# #   .wrap("<div>")#\
# #   .parent()#\
# #   .html()

# bar = () ->
#   for el in getData()
#     if el.type is "img"
#       if el.content is ""
#         el.content = imgPlaceHolder
#     else if el.type == "static" # Do nothing
#     else
#       el.content "BLAH"
# foo
#   .bar (
#     baz
#   ) ->
#     return


# # a
# #   .b

# # c = ->
# #   return d + e

# # ->
# #   if a is c and (false or long.expression.that.necessitates(linebreak))
# #     @foo()

# # rockinRockin
# #         .around ->
# #           3

# # rockrockrock.
# #         around ->
# #           1234


# # a
# #   .b

# # c = ->
# #   return d + e
